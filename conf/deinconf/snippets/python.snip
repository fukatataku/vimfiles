snippet     shebang
abbr        #!/usr/bin/env python
options     head
	#!/usr/bin/env python
	${0}

snippet     shebang3
abbr        #!/usr/bin/env python3
options     head
	#!/usr/bin/env python3
	${0}

snippet     head
abbr        #!/usr/bin/env python...
options     head
	#!/usr/bin/env python
	# -*- coding:utf-8 -*-
	${0}

snippet     head3
abbr        #!/usr/bin/env python3...
options     head
	#!/usr/bin/env python3
	# -*- coding:utf-8 -*-
	${0}

snippet     argparse
abbr        def get_args()...
options     head
	import argparse
	
	
	def get_args():
	    """ コマンドライン引数処理 """
	    parser = argparse.ArgumentParser(description=__doc__)
	
	    # Positional Arguments
	    parser.add_argument("n", type=int, help="Number argument", metavar="NUM1")
	    parser.add_argument("slist", nargs="*", help="String arguments", metavar="STR")
	
	    # Optional Arguments
	    parser.add_argument("-i", dest="input_filepath", type=str, required=True, help="input filepath", metavar="FILEPATH")
	    parser.add_argument("-o", dest="output_filepath", type=str, default=sys.stdout, help="output filepath", metavar="FILEPATH")
	
	    return parser.parse_args()

snippet     definit
abbr        def __init__(self...
options     head
	def __init__(self, ${1}):
		${2}

snippet     defeq
abbr        def __eq__(self...
options     head
	def __eq__(self, other):
		return self.${0} == other

snippet     decorator
abbr        def decorator(func):...
options     head
	def ${0:#:name}(func):
		@functools.wraps(func)
		def wrapper(*args, **kwargs):
			ret = func(*args, **kwargs)
			return ret
		return wrapper

snippet     here
abbr        HERE = os.path.dirname(...
options     head
	HERE = os.path.dirname(os.path.abspath(__file__))

snippet     pprint
abbr        from pprint import...
options     head
	from pprint import pprint
	print("=" * 20)
	pprint()
	print("=" * 20)

snippet     traceback
abbr        import traceback...
options     head
	import traceback
	traceback.print_exc()
